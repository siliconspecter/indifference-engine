/** @file */

#ifndef MATRIX_H

#define MATRIX_H

#include "../primitives/f32.h"
#include "culled_by.h"
#include "vector.h"

/**
 * The number of rows in a matrix.
 */
#define MATRIX_ROWS 4

/**
 * The number of columns in a matrix.
 */
#define MATRIX_COLUMNS 4

/**
 * A matrix.
 */
typedef f32 matrix[MATRIX_ROWS][MATRIX_COLUMNS];

/**
 * An identity matrix, which does not make any changes to coordinates it is
 * applied to.
 */
extern const matrix identity_matrix;

/**
 * Transforms a vector from model space into clip space using a
 * model-view-projection matrix.
 * @remark Coordinates are only culled when W is zero or Z is not within the -1
 *         to 1 range; X and Y may be any values.
 * @param model The vector in model space to transform.
 * @param model_view_projection The model-view-projection matrix to apply.
 * @param clip Overwritten with the corresponding vector in clip space when not
 *             culled, otherwise unmodified.  May be "model".
 * @return The culling which occurred, if any.
 */
culled_by model_to_clip(
    const vector model,
    const matrix model_view_projection,
    vector clip);

/**
 * Transforms a vector from clip space into world space using an inverse
 * model-view-projection matrix.
 * @remark Coordinates are only culled when W is 0; X, Y and Z may be any
 *         values.
 * @param clip The vector in clip space to transform.
 * @param inverse_model_view_projection The inverse model-view-projection matrix
 *                                      to apply.
 * @param model Overwritten with the corresponding vector in model space when
 *              not culled, otherwise unmodified.  May be "clip".
 * @return The culling which occurred, if any.
 */
culled_by clip_to_model(
    const vector clip,
    const matrix inverse_model_view_projection,
    vector model);

/**
 * Calculates the product of two matrices.
 * @param multiplier The first matrix to multiply.
 * @param multiplicand The second matrix to multiply.
 * @param product The matrix to which to write the result.  May be "multiplier",
 *                "multiplicand" or both.
 */
void multiply_matrices(
    const matrix multiplier,
    const matrix multiplicand,
    matrix product);

/**
 * Calculates a projection matrix for a perspective camera similar to that which
 * would be generated by Blender, and its inverse.  It may differ slightly from
 * that generated by Blender.
 * @param width The width of the viewport, in pixel columns.
 * @param height The height of the viewport, in pixel rows.
 * @param focal_length The focal length of the camera, in millimeters.
 * @param shift_x The amount of horizontal shift, where negative values are left
 *                and positive values are right.
 * @param shift_y The amount of vertical shift, where negative values are down
 *                and positive values are up.
 * @param clip_start The distance between the camera and the near clip plane.
 * @param clip_end The distance between the camera and the far clip plane.
 * @param sensor_size The size of the sensor, in millimeters.
 * @param forward The matrix to which to write the result.
 * @param inverse The matrix to which to write the inverse of the result.
 */
void perspective(
    const f32 width,
    const f32 height,
    const f32 focal_length,
    const f32 shift_x,
    const f32 shift_y,
    const f32 clip_start,
    const f32 clip_end,
    const f32 sensor_size,
    matrix forward,
    matrix inverse);

/**
 * Calculates a model matrix similar to that which would be generated by Blender
 * in XYZ Euler mode, and its inverse.  It may differ slightly from that
 * generated by Blender.
 * @param location The location of the object in world space.
 * @param rotation The rotation around each axis, in radians.
 * @param scale The scale of the object on each axis, as multiplying factors.
 * @param forward The matrix to which to write the result.
 * @param inverse The matrix to which to write the inverse of result.
 */
void model(
    const vector location,
    const vector rotation,
    const vector scale,
    matrix forward,
    matrix inverse);

/**
 * Copies the content of a matrix into another.
 * @param origin The matrix to copy from.
 * @param destination The matrix to copy to.
 */
void copy_matrix(
    const matrix origin,
    matrix destination);

#endif
