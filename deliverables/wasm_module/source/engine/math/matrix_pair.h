#ifndef MATRIX_PAIR_H

#define MATRIX_PAIR_H

#include "matrix.h"
#include "vector.h"

/**
 * The number of matrices in a matrix pair.
 */
#define MATRIX_PAIR_MATRICES 2

/**
 * The index of the "forward" matrix in a matrix pair.
 */
#define MATRIX_PAIR_FORWARD 0

/**
 * The index of the "inverse" matrix in a matrix pair.
 */
#define MATRIX_PAIR_INVERSE 1

/**
 * A matrix pair.
 */
typedef matrix matrix_pair[MATRIX_PAIR_MATRICES];

/**
 * An identity matrix pair, which does not make any changes to coordinates it is
 * applied to.
 */
extern const matrix_pair identity_matrix_pair;

/**
 * Calculates a projection matrix for a perspective camera similar to that which
 * would be generated by Blender, and its inverse.  It may differ slightly from
 * that generated by Blender.
 * @param width The width of the viewport, in pixel columns.
 * @param height The height of the viewport, in pixel rows.
 * @param focal_length The focal length of the camera, in millimeters.
 * @param shift_x The amount of horizontal shift, where negative values are left
 *                and positive values are right.
 * @param shift_y The amount of vertical shift, where negative values are down
 *                and positive values are up.
 * @param clip_start The distance between the camera and the near clip plane.
 * @param clip_end The distance between the camera and the far clip plane.
 * @param sensor_size The size of the sensor, in millimeters.
 * @param projection The matrix pair to which to write the result.
 */
void perspective(
    const f32 width,
    const f32 height,
    const f32 focal_length,
    const f32 shift_x,
    const f32 shift_y,
    const f32 clip_start,
    const f32 clip_end,
    const f32 sensor_size,
    matrix_pair projection);

/**
 * Calculates a model matrix similar to that which would be generated by Blender
 * in XYZ Euler mode, and its inverse.  It may differ slightly from that
 * generated by Blender.
 * @param location The location of the object in world space.
 * @param rotation The rotation around each axis, in radians.
 * @param scale The scale of the object on each axis, as multiplying factors.
 * @param model The matrix pair to which to write the result.
 */
void model(
    const vector location,
    const vector rotation,
    const vector scale,
    matrix_pair model);

#endif
